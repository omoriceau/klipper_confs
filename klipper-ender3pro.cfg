# This file is an example config file for cartesian style printers.
# One may copy and edit this file to configure a new cartesian
# printer.

# See docs/Config_Reference.md for a description of parameters.

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
#pin_map: arduino

#[include adxl.cfg]

[virtual_sdcard]
path: ~/gcode_files

#####################################################################################

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 4500
max_z_velocity: 100
max_z_accel: 200
#max_extrude_only_velocity: 120
#max_extrude_only_accel: 1500

[input_shaper]
shaper_freq_x: 75.6
shaper_type_x: ei
shaper_freq_y: 49.6
shaper_type_y: ei

[bed_screws]
screw1: 30.5, 35
#screw1: 74.00, 44
screw2: 30.5, 205
#screw2: 74, 215
screw3: 200.5, 205
#screw3: 244, 215
screw4: 200.5, 35
#screw4: 244, 44

#####################################################################################

[stepper_x]
step_pin: ar54
dir_pin: !ar55
enable_pin: !ar38
endstop_pin: ^ar3
position_endstop: 0
position_max: 250
homing_speed: 50
homing_retract_dist: 0
microsteps: 16
#step_distance: 0.0125
rotation_distance: 40

[tmc2209 stepper_x]
uart_pin: ar40
#interpolate: True
run_current: 0.760
#sense_resistor: 0.110
stealthchop_threshold: 999999

#####################################################################################
 
[stepper_y]
step_pin: ar60
dir_pin: !ar61
enable_pin: !ar56
endstop_pin: ^ar14
position_endstop: 0
position_max: 250
homing_speed: 50
homing_retract_dist: 0
microsteps: 16
#step_distance: 0.0125
rotation_distance: 40

[tmc2209 stepper_y]
uart_pin: ar59
#interpolate: True
run_current: 0.760
#sense_resistor: 0.110
stealthchop_threshold: 999999

#####################################################################################
 
[stepper_z]
step_pin: ar46
dir_pin: ar48
enable_pin: !ar62
endstop_pin: ^ar18
#step_distance: .0025
microsteps: 16
rotation_distance: 8
#position_endstop: 0
position_max: 250
position_min: -0.4

[tmc2209 stepper_z]
uart_pin: ar42
#interpolate: True
run_current: 0.760
sense_resistor: 0.110
stealthchop_threshold: 999999
 
#####################################################################################

[extruder]
step_pin: ar26
dir_pin: !ar28
enable_pin: !ar24
heater_pin: ar10
sensor_pin: analog13
microsteps: 16#
gear_ratio: 50:8 # 10 tooth motor gear
#rotation_distance: 33.333 #nema17 direct drive
rotation_distance: 28.6433 # for 5mm Shaft Driven Bondtech gearsets sherpa
nozzle_diameter: 0.4
filament_diameter: 1.750
#sensor_type: EPCOS 100K B57560G104F
sensor_type: Generic 3950
min_temp: 0
max_temp: 250
min_extrude_temp: 0
max_extrude_only_distance: 1400.0
# pressure_advance: 0.112
control: pid
#all metal
#pid_kp = 31.748
#pid_ki = 2.117
#pid_kd = 119.056
# ptfe - 0.4 - brass nozzle
#pid_kp = 35.807
#pid_ki = 2.713
#pid_kd = 118.164
# clone CHT 0.4 - ptfe
pid_kp = 35.268
pid_ki = 2.642
pid_kd = 117.707

[tmc2209 extruder]
uart_pin: ar44
#microsteps: 16
interpolate: True
# run_current: 0.700 # Nema 17
run_current: 0.30 # Nema 14
hold_current: 0.200
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################################

[heater_fan my_nozzle_fan]
pin: ar7
heater: extruder
heater_temp: 50.0
 
#####################################################################################

[heater_bed]
heater_pin: ar8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog14
control: pid
pid_Kp: 68.215 
pid_Ki: 1.143 
pid_Kd: 1018.107
min_temp: 0
max_temp: 130
 
#####################################################################################
 
[fan]
pin: ar9

#####################################################################################

[gcode_arcs]
resolution: 1.0

[screws_tilt_adjust]
horizontal_move_z: 5
#screw_thread: CW-M4
screw1: 74.00, 44
screw1_name: front left
screw2: 74, 215
screw2_name: back left
screw3: 244, 215
screw3_name: back right
screw4: 244, 44
screw4_name: front right

[bed_mesh]
speed: 100
mesh_pps: 3,3
horizontal_move_z: 5
mesh_min: 24,25
mesh_max: 206,205
probe_count: 4,4
split_delta_z: 0.025
algorithm: lagrange

[safe_z_home]
home_xy_position: 112,108
speed: 200.0
z_hop: 5
z_hop_speed: 10

#####################################################################################

[display]
lcd_type: st7920
cs_pin: ar27
sclk_pin: ar25
sid_pin: ar29
encoder_pins: ^ar23, ^ar17
click_pin: ^!ar35

#####################################################################################
 
[board_pins]
aliases:
    # Common EXP1 header found on many "all-in-one" ramps clones
    EXP1_1=ar37, EXP1_3=ar17, EXP1_5=ar23, EXP1_7=ar27, EXP1_9=<GND>,
    EXP1_2=ar35, EXP1_4=ar16, EXP1_6=ar25, EXP1_8=ar29, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=ar50, EXP2_3=ar31, EXP2_5=ar33, EXP2_7=ar49, EXP2_9=<GND>,
    EXP2_2=ar52, EXP2_4=ar53, EXP2_6=ar51, EXP2_8=ar41, EXP2_10=<RST>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi"
    # Note, some boards wire: EXP2_8=<RST>, EXP2_10=ar41

#####################################################################################

# Arduino aliases for atmega2560/1280 (Arduino mega) boards
[board_pins arduino-mega]
aliases:
    ar0=PE0, ar1=PE1, ar2=PE4, ar3=PE5, ar4=PG5,
    ar5=PE3, ar6=PH3, ar7=PH4, ar8=PH5, ar9=PH6,
    ar10=PB4, ar11=PB5, ar12=PB6, ar13=PB7, ar14=PJ1,
    ar15=PJ0, ar16=PH1, ar17=PH0, ar18=PD3, ar19=PD2,
    ar20=PD1, ar21=PD0, ar22=PA0, ar23=PA1, ar24=PA2,
    ar25=PA3, ar26=PA4, ar27=PA5, ar28=PA6, ar29=PA7,
    ar30=PC7, ar31=PC6, ar32=PC5, ar33=PC4, ar34=PC3,
    ar35=PC2, ar36=PC1, ar37=PC0, ar38=PD7, ar39=PG2,
    ar40=PG1, ar41=PG0, ar42=PL7, ar43=PL6, ar44=PL5,
    ar45=PL4, ar46=PL3, ar47=PL2, ar48=PL1, ar49=PL0,
    ar50=PB3, ar51=PB2, ar52=PB1, ar53=PB0, ar54=PF0,
    ar55=PF1, ar56=PF2, ar57=PF3, ar58=PF4, ar59=PF5,
    ar60=PF6, ar61=PF7, ar62=PK0, ar63=PK1, ar64=PK2,
    ar65=PK3, ar66=PK4, ar67=PK5, ar68=PK6, ar69=PK7,
    analog0=PF0, analog1=PF1, analog2=PF2, analog3=PF3, analog4=PF4,
    analog5=PF5, analog6=PF6, analog7=PF7, analog8=PK0, analog9=PK1,
    analog10=PK2, analog11=PK3, analog12=PK4, analog13=PK5, analog14=PK6,
    analog15=PK7,
    # Marlin adds these additional aliases
    ml70=PG4, ml71=PG3, ml72=PJ2, ml73=PJ3, ml74=PJ7,
    ml75=PJ4, ml76=PJ5, ml77=PJ6, ml78=PE2, ml79=PE6,
    ml80=PE7, ml81=PD4, ml82=PD5, ml83=PD6, ml84=PH2,
    ml85=PH7
 
#####################################################################################

[exclude_object]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 10,10
variable_parameter_AREA_END : 215,215
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

#####################################################################################

[display_status]

#####################################################################################

[pause_resume]
#recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

#####################################################################################

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#####################################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#####################################################################################

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_STANDBY_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(printer.configfile.config.extruder.nozzle_diameter)|float %}
    {% set INITIAL_LINE_HEIGHT = params.INITIAL_LINE_HEIGHT|default(NOZZLE_SIZE*0.6)|float %}

    # set bed temperature first since it's the slowest
    M140 S{BED_TEMP}

    {% if printer[printer.toolhead.extruder].temperature > EXTRUDER_STANDBY_TEMP %}
        M104 S{printer[printer.toolhead.extruder].temperature}
    {% else %}
        # wait for a bit
        M104 S{EXTRUDER_STANDBY_TEMP} ; set nozzle heat to 150c
    {% endif %}

    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-10|round(0)|int} MAXIMUM={BED_TEMP*1.1|round(0)|int}
    
    # Reset Extruder
    G92 E0
    # Use absolute coordinates
    G90
    # Home the printer
    {% if "xyz" not in printer.toolhead.homed_axes %}
	    G28
	{% endif %}

    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-40|round(0)|int} MAXIMUM={BED_TEMP*1.1|round(0)|int}
    # Set and wait for nozzle and bed to reach temperature
    M109 S{EXTRUDER_TEMP}
    M190 S{BED_TEMP}

    # Move Z Axis up little to prevent scratching of Heat Bed
    G1 Z2.0 F3000
    # Move to start position
    G1 X20 Y5 Z0.3 F5000.0
    # Draw the first line
    G1 X200.0 Y5 Z0.3 F1500.0 E15 
    # Move to side a little
    G1 X200.0  Y{5+NOZZLE_SIZE} Z{INITIAL_LINE_HEIGHT} F5000.0 
    # Draw the second line
    G1 X20 Y{5+NOZZLE_SIZE} Z{INITIAL_LINE_HEIGHT} F1500.0 E30
    
    # Reset Extruder
    G92 E0
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

#####################################################################################

[gcode_macro END_PRINT]
gcode:
    # Turn-off fan
    M107
    # Turn-off hotend
    M104 S0
    # Turn-off bed
    M140 S0
  
    # Relative positioning
    G91
    # Retract a bit
    G1 E-2 F2700 
    # Retract and raise Z
    G1 E-2 Z0.2 F2400
    # Wipe out
    G1 X5 Y5 F3000
    # Raise Z more
    G1 Z10
    # Absolute positioning
    G90
    # Move bed towards user
    G1 X0 Y220
  
    # Disable all steppers but Z
    M84 X Y E

#####################################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  CLEAR_PAUSE

#####################################################################################

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

    {% set area_min_x = params.AREA_START.split(",")[0]|float %}
    {% set area_min_y = params.AREA_START.split(",")[1]|float %}
    {% set area_max_x = params.AREA_END.split(",")[0]|float %}
    {% set area_max_y = params.AREA_END.split(",")[1]|float %}

    {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
    {% else %}
        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
    {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}

        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

#####################################################################################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(1)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro DUMP_CONFIG]
gcode: 
    {% set out = [] %}

    {% for top_key in printer %}
        {% if top_key == 'configfile' %}
	    {% for config_key in printer[top_key]['config'] %}
		{% if 'gcode_macro' not in config_key and  config_key != 'board_pins' and config_key == 'extruder'%}
		    {% for key in printer[top_key]['config'][config_key] %}
                        {% set dummy = out.append("printer.%s.config.%s.%s = %s" % (top_key, config_key , key, printer[top_key]['config'][config_key][key]|safe )) %}
                    {% endfor%}
		{% endif %}
	    {% endfor %}
        {% endif %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*#
#*# [input_shaper]
#*#
#*# [stepper_z]
#*# position_endstop = 1.5

